/* eslint-env node */
const rollup = require('rollup');
const bundleSize = require('rollup-plugin-bundle-size');
const sourcemaps = require('rollup-plugin-sourcemaps');
const babel = require('rollup-plugin-babel');
const nodeResolve = require('rollup-plugin-node-resolve');

const pkg = require('./package.json');

const name = `${pkg.name} v${pkg.version}`;
const copyright = `(c) ${new Date().getFullYear()} Vimeo`;
const banner = `/*! ${name} | ${copyright} */`;

const argv = require('yargs')
    .option('w', {
        alias: 'watch',
        describe: 'Watch files for changes.',
        type: 'boolean'
    })
    .option('v', {
        alias: 'verbose',
        describe: 'Verbose mode',
        type: 'boolean'
    })
    .help('h')
    .alias('h', 'help')
    .argv;

let cache = null;
let watcher = null;
let building = false;
let needsRebuild = false;

const generateBundle = () => {
    if (building) {
        if (argv.verbose) {
            console.log('Already building, queuing up another build');
        }

        needsRebuild = true;
        return;
    }

    console.log(new Date().toString());
    console.log('Bundling...');
    console.time('Bundled in');

    rollup.rollup({
        entry: 'src/mediasorcerer.js',
        plugins: [
            bundleSize(),
            sourcemaps(),
            babel({
                exclude: 'node_modules/**'
            }),
            nodeResolve({
                jsnext: true
            })
        ],
        cache
    }).then((bundle) => {
        cache = bundle;

        if (watcher) {
            bundle.modules.forEach((module) => watcher.add(module.id));
        }

        return Promise.all([
            bundle.write({
                banner,
                dest: pkg.main,
                format: 'umd',
                moduleName: 'MediaSorcerer',
                sourceMap: true
            }),
            bundle.write({
                banner,
                dest: pkg['jsnext:main'],
                format: 'es',
                sourceMap: true
            })
        ]);
    })
    .then(() => {
        building = false;
        console.timeEnd('Bundled in');

        if (needsRebuild) {
            generateBundle();
        }

        return true;
    })
    .catch((e) => {
        console.error(e);
        console.timeEnd('Bundled in');
    });
};

if (argv.watch) {
    const chokidar = require('chokidar');
    watcher = chokidar.watch();

    watcher.on('change', (path) => {
        if (argv.verbose) {
            console.log(path);
        }

        generateBundle();
    });
}

generateBundle();
