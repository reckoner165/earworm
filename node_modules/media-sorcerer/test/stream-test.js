import Stream from '../src/stream';

/////////////////////////
// Helpers and globals //
/////////////////////////

const expect = chai.expect;

const initSegments = [
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626106/chop/segment-0.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626112/chop/segment-1.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626111/chop/segment-2.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626107/chop/segment-3.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626109/chop/segment-4.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626110/chop/segment-5.mp4'
];

////////////////
// Test suite //
////////////////

describe('Stream', function() {
    before(() => {
        this.server = sinon.fakeServer.create();
        this.server.respondWith([200, {
            'Content-Type': 'video/mp3=4'
        }, 'OK']);
    });

    beforeEach(() => {
        const initSegment = initSegments[0];
        this.stream = new Stream(initSegment);
        this.server.respond();
    });

    afterEach(() => {
        this.stream = null;
    });

    after(() => {
        this.server.restore();
    });

    describe('#addSegment', () => {
        it('should return a promise that eventually resolves', () => {
            const segment = initSegments[1];
            // Segments that are an array buffer get resolved immediately
            // so we don't have to go through the fetcher
            const promise = this.stream.addSegment(segment);

            this.server.respond();

            return promise.should.be.fulfilled;
        });
    });

    describe('#getInitSegment', () => {
        it('should return a promise that resolves with the init segment', () => {
            // Init segments that are an array buffer get resolved immediately
            // so we don't have to go through the fetcher
            const segment = new Uint8Array(0x10);
            const stream = new Stream(segment);

            return stream.getInitSegment().should.become(segment);
        });
    });

    describe('Events', () => {
        it('should fire a "queued" event passing the segment when just adding a segment url', (done) => {
            const segment = initSegments[0];

            this.stream.on('queued', (id) => {
                expect(id).to.equal(segment);
                done();
            });
            this.stream.addSegment(segment);

            this.server.respond();
        });

        it('should fire a "queued" event passing the identifier when adding a segment url with said identifier', (done) => {
            const segment = initSegments[0];
            const identifier = 'thing';

            this.stream.on('queued', (id) => {
                expect(id).to.equal(identifier);
                done();
            });
            this.stream.addSegment(segment, { identifier });

            this.server.respond();
        });

        it('should fire a "segmentadd" event when adding a segment via its url', () => {
            const segment = initSegments[0];

            let calledEvent = false;

            this.stream.on('segmentadd', () => {
                calledEvent = true;
            });

            const identifier = 'thing';

            this.stream.addSegment(segment, { identifier });

            this.server.respond();

            expect(calledEvent).to.be.true;
        });

        it('should not fire a "segmentadd" event when passing a true loadOnly flag', () => {
            const segment = initSegments[0];

            let calledEvent = false;

            this.stream.on('segmentadd', () => {
                calledEvent = true;
            });

            const identifier = 'thing';
            const isFinalSegment = false;
            const loadOnly = true;

            this.stream.addSegment(segment, { identifier, isFinalSegment, loadOnly });

            this.server.respond();

            expect(calledEvent).to.be.false;
        });

        it('should fire a "bufferqueueadd" event when adding a segment via its url', (done) => {
            const segment = initSegments[0];
            const identifier = 'thing';

            this.stream.on('bufferqueueadd', (id) => {
                expect(id).to.equal(identifier);
                done();
            });
            this.stream.addSegment(segment, { identifier });

            this.server.respond();
        });

        it('should fire a "bufferqueueadd" event when adding an array buffer segment', (done) => {
            const segment = new Uint8Array(0x10);
            const identifier = 'thing';

            this.stream.on('bufferqueueadd', (id) => {
                expect(id).to.equal(identifier);
                done();
            });
            this.stream.addSegment(segment, { identifier });

            this.server.respond();
        });
    });
});
