import { percentile, average, median, parseResponseHeaders } from '../src/util';

/////////////////////////
// Helpers and globals //
/////////////////////////

const expect = chai.expect;

////////////////
// Test suite //
////////////////

describe('util', () => {
    describe('average', () => {
        it('should return average', () => {
            const numbers = [10, 20, 25, 30];
            const avg = average(numbers);
            expect(avg).to.equal(21.25);
        });

        it('should return weighted average', () => {
            const numbers = [10, 20, 25, 30];
            const weightedAvg = average(numbers, [1, 1, 2, 4]);
            expect(weightedAvg).to.equal(25);
        });

        it('should not error with no numbers', () => {
            expect(average([])).to.equal(0);
        });
    });

    describe('precentile', () => {
        it('should return percentile with one number', () => {
            const numbers = [10];
            const p = percentile(numbers, 0.7);
            expect(p).to.equal(10);
        });

        it('should return percentile with two numbers', () => {
            let numbers = [10, 20];
            let p = percentile(numbers, 0.7);
            expect(p).to.equal(20);

            numbers = [10, 20];
            p = percentile(numbers, 0.3);
            expect(p).to.equal(16);

            numbers = [10, 30];
            p = percentile(numbers, 0.7);
            expect(p).to.equal(30);
        });

        it('should return percentile with more than two numbers', () => {
            let numbers = [10, 20, 20, 25, 30, 40, 45];
            let p = percentile(numbers, 0.8);
            expect(p).to.equal(43);

            numbers = [10, 20, 20, 25, 30, 40, 45];
            p = percentile(numbers, 0.6);
            expect(p).to.equal(32);

            numbers = [10, 20, 20, 25, 30, 40, 45];
            p = percentile(numbers, 0.5);

            // I would kind of expect this to be 25 since that is the median
            // but im going to just take a guess that the “Linear interpolation
            // between closest ranks” method for calculating a percentile yields
            // this value.
            expect(p).to.equal(27.5);
        });

        it('should not error with invalid input', () => {
            expect(percentile([], 0.9)).to.equal(0);
            expect(percentile([10, 20, 30], 0)).to.equal(10);
            expect(percentile([10, 20, 30], -1)).to.equal(10);
            expect(percentile([10, 20, 30], 1)).to.equal(30);
            expect(percentile([10, 20, 30], 2)).to.equal(30);
        });
    });

    describe('median', () => {
        it('should return median', () => {
            let numbers = [10];
            let m = median(numbers);
            expect(m).to.equal(10);

            numbers = [10, 20];
            m = median(numbers);

            // average here
            expect(m).to.equal(15);

            numbers = [10, 20, 30];
            m = median(numbers);
            expect(m).to.equal(20);

            numbers = [10, 20, 30, 40];
            m = median(numbers);

            // average again
            expect(m).to.equal(25);
        });
    });

    describe('parseResponseHeaders', () => {
        it('should parse the headers into an object', () => {
            expect(parseResponseHeaders()).to.deep.equal({});
            expect(parseResponseHeaders(null)).to.deep.equal({});
            expect(parseResponseHeaders('')).to.deep.equal({});

            expect(parseResponseHeaders('Content-Type: video/mp4\r\nExpires: 0')).to.deep.equal({
                'content-type': 'video/mp4',
                'expires': '0'
            });

            expect(parseResponseHeaders('Content-Type:video/mp4\r\nExpires:0')).to.deep.equal({
                'content-type': 'video/mp4',
                'expires': '0'
            });

            expect(parseResponseHeaders('Content-Type: video/mp4\nExpires: 0')).to.deep.equal({
                'content-type': 'video/mp4',
                'expires': '0'
            });

            expect(parseResponseHeaders('Content-Type:video/mp4 \nExpires:0 ')).to.deep.equal({
                'content-type': 'video/mp4',
                'expires': '0'
            });

            expect(parseResponseHeaders('Test:EP:Q,E:h')).to.deep.equal({
                test: 'EP:Q,E:h'
            });

            expect(parseResponseHeaders('Content-Type:video/mp4\nTest:')).to.deep.equal({
                'content-type': 'video/mp4',
                'test': ''
            });
        });
    });
});
