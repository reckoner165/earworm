import Fetcher from '../src/fetcher';

/////////////////////////
// Helpers and globals //
/////////////////////////

const expect = chai.expect;

const initSegments = [
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626106/chop/segment-0.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626112/chop/segment-0.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626111/chop/segment-0.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626107/chop/segment-0.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626109/chop/segment-0.mp4',
    'https://skyfiregce-a.akamaihd.net/exp=1447968888~acl=%2F142176323%2F%2A~hmac=fb7ea843a12f2f3ff08bbee54b5a2b2f91a64c960eb6eca5bb4fc823e96466c6/142176323/video/426626110/chop/segment-0.mp4'
];

////////////////
// Test suite //
////////////////

describe('Fetcher', function() {
    beforeEach(() => {
        this.server = sinon.fakeServer.create();
        this.clock = sinon.useFakeTimers();
        this.fetcher = new Fetcher();
    });

    afterEach(() => {
        this.server.restore();
        this.clock.restore();
        this.fetcher = null;
    });

    describe('API', () => {
        describe('#add', () => {
            it('should execute the callback argument when adding a segment', (done) => {
                const segment = initSegments[0];
                const cb = function() {
                    expect(true).to.be.true;
                    done();
                };

                this.fetcher.start().add(segment, cb);

                this.server.requests[0].respond(200, {
                    'Content-Type': 'video/mp4'
                }, 'blah');
            });
        });
    });

    describe('Events', () => {
        it('should fire the "downloadstart" event before the request goes out with an identifier', (done) => {
            const segment = initSegments[0];
            const spy = sinon.spy(this.fetcher, '_handleXHRResponse');

            this.fetcher.on('downloadstart', (identifier) => {
                expect(spy).to.not.have.been.called;
                expect(identifier).to.equal(segment);

                spy.restore();
                done();
            });

            this.fetcher.start().add(segment);
        });

        it('should fire the "downloadend" event after the request completes with an identifier', (done) => {
            const segment = initSegments[0];
            const spy = sinon.spy(this.fetcher, '_handleXHRResponse');

            this.fetcher.on('downloadend', (identifier) => {
                expect(spy).to.have.been.calledOnce;
                expect(identifier).to.equal(segment);
                spy.restore();
                done();
            });

            this.fetcher.start().add(segment);

            this.server.requests[0].respond(200, {
                'Content-Type': 'video/mp4'
            }, 'blah');
        });

        it.skip('should fire the "downloaderror" event if the response status code is 400-499', (done) => {
            const segment = initSegments[0];
            const codes = [400, 416, 499];
            // Codes that dont fire an error
            const invalidCodes = [200];

            let counter = 0;

            this.fetcher.on('downloaderror', (identifier, code) => {
                counter += 1;
                expect(identifier).to.equal(segment);
                // If we're on the last iteration of our test loop, done()
                if (code === codes[codes.length - 1]) {
                    expect(counter).to.equal(codes.length);
                    done();
                }
            });

            invalidCodes.concat(codes).forEach((code, i) => {
                this.fetcher.start().add(segment, () => {});

                this.server.requests[i].respond(code, {
                    'Content-Type': 'video/mp4'
                }, 'blah');
            });
        });
    });
});
