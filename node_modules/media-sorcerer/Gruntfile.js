module.exports = function(grunt) {

    const childProcess = require('child_process');

    grunt.task.registerTask('lint', 'Lint JS files', () => {
        childProcess.execSync('node_modules/.bin/eslint --format=node_modules/eslint-formatter-pretty src/ test/', { stdio: 'inherit' });
    });

    grunt.task.registerTask('test', 'Run Karma tests', () => {
        childProcess.execSync('node_modules/karma/bin/karma start --single-run', { stdio: 'inherit' });
    });

    grunt.task.registerTask('build', 'Build media-sorcerer', () => {
        childProcess.execSync('node rollup.js', { stdio: 'inherit' });
    });

    grunt.task.registerTask('staging-release', 'Staging release', () => {
        const target = grunt.option('target') || '';
        const addOn = grunt.option('add-on') || null;
        const mediaSorcererVersion = grunt.option('media-sorcerer') || null;

        if (target === '') {
            grunt.fail.fatal('No target feature branches to merge in to staging were specified.\nPlease use `--target=branch1,branch2` option to specify branches.');
        }

        const releaseTypes = ['major', 'minor', 'patch'];
        if ((mediaSorcererVersion === null || releaseTypes.indexOf(mediaSorcererVersion) === -1) && addOn === null) {
            grunt.fail.fatal(`Telecine version to update to not specified or incorrect.\nPlease use '--telecine=<${releaseTypes.join('|')}>' to specify version`);
        }

        const currentBranch = String(childProcess.execSync('git rev-parse --abbrev-ref HEAD')).trim();
        if (currentBranch !== 'staging') {
            childProcess.execSync('git checkout staging');
        }

        const hardResetBranch = addOn === null ? 'master' : 'staging';
        childProcess.execSync(`git reset --hard origin/${hardResetBranch}`);

        const targets = target.split(',');
        targets.forEach((branchTarget) => {
            if (branchTarget === '') {
                return;
            }

            branchTarget = branchTarget.trim();
            childProcess.execSync(`git fetch origin ${branchTarget}:${branchTarget}`);
            childProcess.execSync(`git merge --no-edit ${branchTarget}`);
        });

        const semver = require('semver');
        var pkgConfig = grunt.file.readJSON('./package.json');
        var pkgConfigChange = false;

        const oldVersion = pkgConfig.version;
        const newVersion = semver.inc(oldVersion, mediaSorcererVersion);

        // Only update package.json version if we are not doing an add on since the version should have already been updated
        if (addOn === null) {
            pkgConfig.version = newVersion;
            pkgConfigChange = true;
        }

        grunt.file.write('./package.json', `${JSON.stringify(pkgConfig, null, 2)}\n`);
        childProcess.execSync('npm install');

        grunt.option('newVersion', newVersion);
        grunt.option('pkgConfigChange', pkgConfigChange);

        grunt.task.run([
            'default',
            'commit-staging-release'
        ]);
    });

    grunt.task.registerTask('commit-staging-release', 'Task used by staging-release to commit and push the release changes to staging', () => {
        const addOn = grunt.option('add-on') || null;
        const dryRun = grunt.option('dry-run');

        const newVersion = grunt.option('newVersion');
        const pkgConfigChange = grunt.option('pkgConfigChange');

        var commitMsg = `Update to version ${newVersion}`;

        if (pkgConfigChange) {
            childProcess.execSync('git add -u');
            childProcess.execSync(`git commit -m "${commitMsg}"`);
        }

        if (!dryRun) {
            childProcess.execSync('git push origin staging');
        }
    });

    grunt.task.registerTask('default', 'Lint, test, and build', [
        'lint',
        'test',
        'build'
    ]);
};
