import { average, median } from './util';

/**
 * @fileoverview Manager class that checks a video for dropped frames
 */
class FrameDropper {
    constructor(video) {
        this._video = video;
        this._running = false;
        this._droppedFramesTimeout = null;

        this._droppedFrameData = {};
        this._decodedFrameData = {};
        this._droppedFrames = 0;
        this._decodedFrames = 0;

        // Key to collect dropped frames on
        // Might be worth it to not let an instance of this class start
        // without explicitly setting the key
        this._streamIndex = 'default';

        this.bound = {
            startCheckingDroppedFrames: this._startCheckingDroppedFrames.bind(this),
            stopCheckingDroppedFrames: this._stopCheckingDroppedFrames.bind(this)
        };
    }

    get streamIndex() {
        return this._streamIndex;
    }

    set streamIndex(value) {
        this._streamIndex = value;
    }

    ////////////////////
    // Public methods //
    ////////////////////

    start() {
        this._startCheckingDroppedFrames();
        return this;
    }

    stop() {
        this._stopCheckingDroppedFrames();
        return this;
    }

    destroy() {
        this._stopCheckingDroppedFrames();
        this._removeEvents();
    }

    /**
     * Get sample of dropped frames on a specific key index
     *
     * @param  {Number} howMany Amount of items to sample
     * @param  {Mixed} streamIndex      key identifier to get sampled frames from
     * @param  {String} type    type of sampling, ie median or average
     * @return {Number}         Calculated amount of dropped frames
     */
    getDroppedFrameRate(howMany, streamIndex, type = 'average') {
        const rates = this._droppedFrameData[streamIndex];

        if (!rates) {
            return 0;
        }

        if (rates.length < howMany) {
            return 0;
        }

        const ratesForAverage = rates.slice(-howMany);
        if (type === 'median') {
            return median(ratesForAverage);
        }

        return average(ratesForAverage);
    }

    getDroppedFrameTotal() {
        return {
            dropped: this._getTotalDroppedFrames(),
            total: this._getTotalFrames()
        };
    }

    /////////////////////
    // Private methods //
    /////////////////////

    _attachEvents() {
        this._video.addEventListener('playing', this.bound.startCheckingDroppedFrames);
        this._video.addEventListener('pause', this.bound.stopCheckingDroppedFrames);
        this._video.addEventListener('ended', this.bound.stopCheckingDroppedFrames);
    }

    _removeEvents() {
        this._video.removeEventListener('playing', this.bound.startCheckingDroppedFrames);
        this._video.removeEventListener('pause', this.bound.stopCheckingDroppedFrames);
        this._video.removeEventListener('ended', this.bound.stopCheckingDroppedFrames);
    }

    _startCheckingDroppedFrames() {
        this._running = true;
        this._checkDroppedFrames();
    }

    _stopCheckingDroppedFrames() {
        this._running = false;
    }

    _checkDroppedFrames() {
        if (!this._running || this._streamIndex === null) {
            return;
        }

        clearTimeout(this._droppedFramesTimeout);

        const totalDropped = this._getTotalDroppedFrames();
        const droppedPerSecond = totalDropped - this._droppedFrames;

        this._droppedFrames = totalDropped;

        const totalDecoded = this._getTotalDecodedFrames();
        const decodedPerSecond = totalDecoded - this._decodedFrames;
        this._decodedFrames = totalDecoded;

        if (!this._droppedFrameData[this._streamIndex]) {
            this._droppedFrameData[this._streamIndex] = [];
        }

        if (!this._decodedFrameData[this._streamIndex]) {
            this._decodedFrameData[this._streamIndex] = [];
        }

        if (this._droppedFrameData[this._streamIndex].length > 100) {
            this._droppedFrameData[this._streamIndex].shift();
        }

        if (this._decodedFrameData[this._streamIndex].length > 100) {
            this._decodedFrameData[this._streamIndex].shift();
        }

        this._droppedFrameData[this._streamIndex].push(droppedPerSecond);
        this._decodedFrameData[this._streamIndex].push(decodedPerSecond);

        this._droppedFramesTimeout = setTimeout(() => {
            this._checkDroppedFrames();
        }, 1000);
    }

    _getTotalDroppedFrames() {
        if (typeof this._video.getVideoPlaybackQuality === 'function') {
            return this._video.getVideoPlaybackQuality().droppedVideoFrames;
        }

        return this._video.webkitDroppedFrameCount || 0;
    }

    _getTotalFrames() {
        if (typeof this._video.getVideoPlaybackQuality === 'function') {
            return this._video.getVideoPlaybackQuality().totalVideoFrames;
        }

        return this._video.webkitDecodedFrameCount || 0;
    }

    _getTotalDecodedFrames() {
        if (typeof this._video.getVideoPlaybackQuality === 'function') {
            const quality = this._video.getVideoPlaybackQuality();
            return quality.totalVideoFrames - quality.droppedVideoFrames - quality.corruptedVideoFrames;
        }

        return this._video.webkitDecodedFrameCount || 0;
    }
}

export default FrameDropper;
