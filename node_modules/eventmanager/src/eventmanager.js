export default function eventManager(obj) {
    obj = obj || {};
    var events = {};

    // Add a listener for an event
    obj.on = function(eventName, handler) {
        eventName = [].concat(eventName);

        for (var i = 0, length = eventName.length; i < length; i++) {
            var currentEvent = eventName[i];

            if (!currentEvent) {
                throw new Error('Tried to listen for an undefined event.');
            }

            if (!events[currentEvent]) {
                events[currentEvent] = [];
            }

            events[currentEvent].push(handler);
        }

        return obj;
    };

    // Add a listener for an event that will run one time only
    obj.once = function(eventName, handler) {
        function wrappedHandler() {
            handler.apply(obj.off(eventName, wrappedHandler), arguments);
        }

        // Store a reference to the original handler so we can remove it
        // if you call off with that handler.
        wrappedHandler.handler = handler;

        return obj.on(eventName, wrappedHandler);
    };

    // Remove a listener from an event
    obj.off = function(eventName, handler) {
        eventName = [].concat(eventName);

        for (var i = 0, length = eventName.length; i < length; i++) {
            var currentEvent = eventName[i];

            if (!currentEvent) {
                throw new Error('Tried to remove an undefined event.');
            }

            if (currentEvent in events) {
                var index = events[currentEvent].indexOf(handler);

                // Loop through all the handlers to find the wrapper so we can remove it
                // Not in there, return
                if (index === -1) {
                    for (var j = 0, jlength = events[currentEvent].length; j < jlength; j++) {
                        if (events[currentEvent][j].handler === handler) {
                            index = i;
                            break;
                        }
                    }

                    if (index === -1) {
                        return obj;
                    }
                }

                events[currentEvent].splice(index, 1);
            }
        }

        return obj;
    };

    // Fire an event
    obj.fire = function(eventName) {
        if (!eventName) {
            throw new Error('Tried to fire an undefined event.');
        }

        if (eventName in events) {

            // Make a copy so that we will definitely loop through all,
            // even if a handler is removed during the loop (by once, for example).
            var eventsCopy = events[eventName].slice(0);

            for (var i = 0, length = eventsCopy.length; i < length; i++) {
                eventsCopy[i].apply(obj, eventsCopy.slice.call(arguments, 1));
            }
        }

        return obj;
    };

    return obj;
}
