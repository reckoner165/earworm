import test from 'ava';
import sinon from 'sinon';
import eventManager from '../dist/eventmanager.js';

test.beforeEach((t) => {
    t.context.obj = eventManager();
    t.context.spy = sinon.spy();
});

test('adds functions', (t) => {
    t.true(typeof t.context.obj.on === 'function');
    t.true(typeof t.context.obj.once === 'function');
    t.true(typeof t.context.obj.off === 'function');
    t.true(typeof t.context.obj.fire === 'function');
});

test('calls the handler when firing an event', (t) => {
    t.context.obj.on('event', t.context.spy);
    t.context.obj.fire('event');

    t.true(t.context.spy.callCount === 1);

    t.context.obj.fire('event');

    t.true(t.context.spy.callCount === 2);
});

test('calls the handler one time when using once()', (t) => {
    t.context.obj.once('event', t.context.spy);
    t.context.obj.fire('event');
    t.context.obj.fire('event');

    t.true(t.context.spy.callCount === 1);
});

test('passes arguments through to the callback', (t) => {
    t.context.obj.on('event', t.context.spy);
    t.context.obj.fire('event', 'first', 'second', 'third');

    t.deepEqual(t.context.spy.getCall(0).args, ['first', 'second', 'third']);
});

test('calls the callbacks in order', (t) => {
    const firstSpy = sinon.spy();
    const secondSpy = sinon.spy();

    t.context.obj.on('event', firstSpy);
    t.context.obj.on('event', secondSpy);
    t.context.obj.fire('event');

    t.true(firstSpy.callCount === 1);
    t.true(secondSpy.callCount === 1);
    t.true(firstSpy.calledBefore(secondSpy));
});

test('off removes the callback', (t) => {
    t.context.obj.on('event', t.context.spy);
    t.context.obj.fire('event');
    t.context.obj.off('event', t.context.spy);
    t.context.obj.fire('event');

    t.true(t.context.spy.callCount === 1);
});

test('accepts multiple events as an array', (t) => {
    t.context.obj.on(['event', 'event2'], t.context.spy);
    t.context.obj.fire('event');
    t.context.obj.fire('event2');

    t.true(t.context.spy.callCount === 2);
});

test('throws an error for undefined events', (t) => {
    t.throws(() => {
        t.context.obj.on();
    }, 'Tried to listen for an undefined event.');

    t.throws(() => {
        t.context.obj.once();
    }, 'Tried to listen for an undefined event.');

    t.throws(() => {
        t.context.obj.off();
    }, 'Tried to remove an undefined event.');

    t.throws(() => {
        t.context.obj.fire();
    }, 'Tried to fire an undefined event.');
});

test('calls all callbacks when one is added with once', (t) => {
    const firstSpy = sinon.spy();
    const secondSpy = sinon.spy();
    const thirdSpy = sinon.spy();

    t.context.obj.on('event', firstSpy);
    t.context.obj.once('event', secondSpy);
    t.context.obj.on('event', thirdSpy);

    t.context.obj.fire('event');

    t.true(firstSpy.callCount === 1);
    t.true(secondSpy.callCount === 1);
    t.true(thirdSpy.callCount === 1);
    t.true(firstSpy.calledBefore(secondSpy));
    t.true(secondSpy.calledAfter(firstSpy));
    t.true(secondSpy.calledBefore(thirdSpy));
    t.true(thirdSpy.calledAfter(secondSpy));

    t.context.obj.fire('event');

    t.true(firstSpy.callCount === 2);
    t.true(secondSpy.callCount === 1);
    t.true(thirdSpy.callCount === 2);
    t.true(firstSpy.calledBefore(thirdSpy));
    t.true(thirdSpy.calledAfter(firstSpy));
});

test('removes a once callback properly before itâ€™s called', (t) => {
    t.context.obj.once('event', t.context.spy);
    t.context.obj.off('event', t.context.spy);
    t.context.obj.fire('event');

    t.true(t.context.spy.callCount === 0);
});
